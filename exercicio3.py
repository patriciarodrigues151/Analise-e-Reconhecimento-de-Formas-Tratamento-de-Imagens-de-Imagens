# -*- coding: utf-8 -*-
"""EXERCICIO3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16c8AnM-u20UpO56JPnnB7hSMpPpHGB5I

Exercício 3
"""

import numpy as np
import PIL as Image
import matplotlib.pyplot as plt
from skimage import data, io, exposure, color
import math
import cv2
from ipywidgets import interactive
from IPython.display import display

"""código para gerar histograma das imagens"""

def imgHist(img):
  color = ('b', 'g', 'r')

  for i, col in enumerate(color):

      histr = cv2.calcHist([img],
                          [i], None,
                          [256],
                          [0, 256])

      plt.plot(histr, color = col)


      plt.xlim([0, 256])

  plt.show()

"""Imagem original"""

img = data.astronaut()
io.imshow(img)
io.show()

imgHist(img)

"""T(r) produz o negativo de uma imagem"""

def imgNegative(img):

  max_intensity = np.max(img).astype(np.uint8)
  negative_img = max_intensity - img

  return negative_img

negative_img = imgNegative(img)
io.imshow(negative_img)
io.show()

imgHist(negative_img)

"""T(r) = r + k, em que k é uma constante inteira. Teste valores crescentes de k. Teste também com valores negativos. (saturar (deixe entre 0 e 255)) e colocar na do log transforma em float
tira 0.1

"""

def imgConst(img, k):
    max_intensity = np.max(img).astype(np.uint8)
    const_img = img + k
    return const_img

const_img = imgConst(img, 200)
plt.imshow(const_img, cmap='gray')
plt.axis('off')
plt.show()

imgHist(const_img)

def imgLog(img):

  c = 255/(np.log(1 + np.max(img)))
  log_transformed = c * np.log(1 + img)
  log_transformed = np.array(log_transformed, dtype = np.uint8)

  return log_transformed

log_transformed = imgLog(img)
plt.imshow(log_transformed)
plt.show()
imgHist(log_transformed)

"""Código que gera T(r) = exp(r)"""

import numpy as np

def imgExp(img):
    max_pixel_value = np.max(img)
    normalized_img = img - max_pixel_value
    img_exp = np.exp(normalized_img)
    img_exp = (img_exp / np.max(img_exp)) * 255
    img_exp = img_exp.astype(np.uint8)
    return img_exp

def apply_exp_transform(c):
    transformed_image = imgExp(c * img)
    io.imshow(transformed_image)
    io.show()

apply_exp_transform(1.0)